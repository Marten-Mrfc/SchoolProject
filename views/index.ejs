<!DOCTYPE html>
<html lang="nl">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">
  <link rel="stylesheet" href="/style.css">
  <link href="https://unpkg.com/aos@2.3.1/dist/aos.css" rel="stylesheet">
</head>

<body class="flex-container">

  <aside class="sidebar">
    <h2 class="sidebar-title">Klassen</h2>
    <ul class="class-list">
      <% for (const className of classes) { %>
      <div class="class-item <%=className===timetable.class ? 'selected' : '' %>" onclick="switchClass('<%= className %>')">
        <%= className %>
      </div>
      <% } %>
    </ul>
  </aside>

  <div class="main-content container mt-4">
    <h1 id="fixedHeader">
      <%= timetable.class %>
      <span class="bi bi-circle-fill status d-inline-block" style="color: white; position: relative;">
        <span class="nummer" style="position: absolute; top: 10%; left: 50%; transform: translateX(-50%); color: white; font-size: 30px;"></span>
      </span>
    </h1>

    <table class="table ">
      <thead>
        <tr>
          <th>Uur</th>
          <th>Maandag</th>
          <th>Dinsdag</th>
          <th>Woensdag</th>
          <th>Donderdag</th>
          <th>Vrijdag</th>
        </tr>
      </thead>
      <tbody>
        <% ["08:05 - 08:55", "08:55 - 09:40", "10:05 - 10:55", "10:55 - 11:45", "12:10 - 13:00"].forEach((time, timeIndex) => { %>
          <tr>
            <td>
              <%= time %>
            </td>
            <% ["Maandag", "Dinsdag", "Woensdag", "Donderdag", "Vrijdag"].forEach((day, dayIndex) => { %>
              <% const entry = timetable.schedule.find(e => e.day === day && e.time === time); %>
              <% const uniqueCellId = `td-${timeIndex * 5 + dayIndex + 1}`; %>
              <td>
                <div class="dropdown <%= uniqueCellId %>" data-bs-toggle="dropdown" aria-expanded="true" data-bs-auto-close="true">
                  <% if (entry && entry.test) { %>
                    <%= entry.subject %>
                    <span class="badge bg-primary text-center <%= uniqueCellId %>-badge">
                      <%= entry.test %>
                    </span>
                  <% } else { %>
                    <%= entry ? entry.subject : '' %>
                  <% } %>
                  <ul class="dropdown-menu">
                    <li><a class="dropdown-item  <%= entry && entry.test === '' ? 'active' : '' %>" href="#" onclick="updateTest('<%= day %>', '<%= time %>', 'Geen toets', '<%= uniqueCellId %>')">Geen toets</a></li>
                    <li><a class="dropdown-item  <%= entry && entry.test === 'so' ? 'active' : '' %>" href="#" onclick="updateTest('<%= day %>', '<%= time %>', 'so', '<%= uniqueCellId %>')">so</a></li>
                    <li><a class="dropdown-item  <%= entry && entry.test === 'pw' ? 'active' : '' %>" href="#" onclick="updateTest('<%= day %>', '<%= time %>', 'pw', '<%= uniqueCellId %>')">pw</a></li>
                    <li><a class="dropdown-item  <%= entry && entry.test === 'mo' ? 'active' : '' %>" href="#" onclick="updateTest('<%= day %>', '<%= time %>', 'mo', '<%= uniqueCellId %>')">mo</a></li>
                  </ul>
                </div>
              </td>
            <% }); %>
          </tr>
        <% }); %>
      </tbody>
      
    </table>
    <div class="card-grou">
      <div class="card">
        <h3 class="card-header">
          Reactie van leerling
        </h3> 
        <p class="card-text reaction">Laden...</p>       
      </div>
      <div class="card">
        <h3 class="card-header">
          Selecteer week
        </h3> 
        <table>
          t
        </table>    
      </div>
    </div>
    <script src="https://unpkg.com/aos@2.3.1/dist/aos.js"></script>
    <script>
      AOS.init();
    </script>
    <script>
      var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
      var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl)
      })
    </script>
<script>
function getQueryStringValue(key) {
  const queryString = window.location.search;
  const urlParams = new URLSearchParams(queryString);
  return urlParams.get(key);
}
document.addEventListener('DOMContentLoaded', function () {
  // Fetch initial totals from the server
  const currentKlas = getQueryStringValue('klas');
  console.log(currentKlas);
  fetch(`/getInitialTotals?klas=${currentKlas}`)
    .then(response => response.json())
    .then(initialTotals => {
      // Call calculateAndDisplayValues with the initial totals
      calculateAndDisplayValues(initialTotals);
      getRandomComment();
    })
    .catch(error => {
      console.error('Error fetching initial totals:', error);
    });
});
async function getRandomComment() {
  try {
    // Assuming you want to include the value of '.nummer' in the request
    const spanElement = document.querySelector('.nummer');
    const nummerValue = spanElement.textContent; // or spanElement.value, depending on the element type

    const response = await fetch(`/getRandomText?nummer=${nummerValue}`);
    const data = await response.json();

    if (data.success) {
      var reaction = document.querySelector('.reaction');
      reaction.textContent = `"${data.randomText}"` 
    } else {
      console.error('Error:', data.error);
    }
  } catch (error) {
    console.error('Fetch Error:', error);
  }
};

// Call the function with the desired class number (replace 'selectedClass' with your actual variable)
  // Define the calculateAndDisplayValues function
  function calculateAndDisplayValues(initialTotals) {
    var totalPw = initialTotals.totalPw;
    var totalSo = initialTotals.totalSo;
    var totalMo = initialTotals.totalMo;
    console.log(totalPw, totalSo, totalMo);

    // Restricting values to specified maximums
    totalSo === Math.min(5, totalSo);
    totalPw === Math.min(3, totalPw);
    totalMo === Math.min(4, totalMo);
    console.log(totalPw, totalSo, totalMo);
    // Calculate value based on amounts of tests
    var value, color;

    if (totalSo === 0 && totalPw === 0 && totalMo === 0) {
      console.log("Geen toetsen");
      value = 10; // Default value when no tests are taken
      color = '#44ce1b';
    } else {
      value = 10;

      if (totalMo !== 0) value -= 1 * totalMo;
      if (totalSo !== 0) value -= 2 * totalSo;
      if (totalPw !== 0) value -= 3 * totalPw;
      if (totalSo === 5 || totalPw === 3 || totalMo === 4) {
        value = 1;
      }

      // Ensure the value is within the range [1, 10]
      value = Math.max(1, Math.min(10, value));

      // Adjust colors based on the calculated value
      if (value >= 7) {
        color = '#bbdb44';
      } else if (value >= 4.5) {
        color = '#f7e379';
      } else if (value >= 2) {
        color = '#f2a134';
      } else if (value >= 1) {
        color = '#ff0000';
      } else {
        color = '#e51f1f';
      }
    }
    console.log(value);
    var spanElement = document.querySelector('.nummer');
    // Set the text content of the span to the calculated value
    spanElement.textContent = value;

    console.log(color);

    var statusElement = document.querySelector(".status");
    if (statusElement) {
      statusElement.style.color = color;
    } else {
      console.error("Element with class 'status' not found");
    }
  }



      function switchClass(selectedClass) {
        window.location.href = '/?klas=' + encodeURIComponent(selectedClass);
      }
      function updateTest(day, time, test, id) {
        
  const className = '<%= timetable.class %>';
  let updatedTest = test;

  if (test === 'Geen toets') {
    updatedTest = '';
  }

  fetch('/updateTimetable', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      class: className,
      day: day,
      time: time,
      test: updatedTest,
    }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      let badge = document.querySelector(`.${id}-badge`); // Selecting by the unique ID

      // Create a new badge if it doesn't exist
      if (!badge) {
        badge = document.createElement('span');
        badge.className = `badge bg-primary text-center ${id}-badge`;
        document.querySelector(`.${id}`).appendChild(badge);
      }

      const dropdownItems = document.querySelectorAll(`.${id} .dropdown-item`); // Selecting by the unique ID

      badge.textContent = updatedTest;
      dropdownItems.forEach(item => {
        item.classList.remove('active');
        if (item.textContent.trim() === test) {
          item.classList.add('active');
        }
      });
    } else {
      // Handle the error if necessary
      console.error('Failed to update timetable:', data.error);
    }
  })
  .catch(error => {
    console.error('Error during fetch:', error);
  });
  const currentKlas = getQueryStringValue('klas');
  console.log(currentKlas);
  fetch(`/getInitialTotals?klas=${currentKlas}`)
    .then(response => response.json())
    .then(initialTotals => {
      // Call calculateAndDisplayValues with the initial totals
      calculateAndDisplayValues(initialTotals);
      getRandomComment();
    })
    .catch(error => {
      console.error('Error fetching initial totals:', error);
    });
  }
    </script>
</body>

</html>